// Code generated by protoc-gen-go.
// source: vo.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家的详细数据
type UserData struct {
	Userid           *string   `protobuf:"bytes,1,req,name=userid" json:"userid,omitempty"`
	Nickname         *string   `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Phone            *string   `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Sex              *uint32   `protobuf:"varint,4,req,name=sex" json:"sex,omitempty"`
	Photo            *string   `protobuf:"bytes,5,req,name=photo" json:"photo,omitempty"`
	Coin             *uint32   `protobuf:"varint,6,req,name=coin" json:"coin,omitempty"`
	Diamond          *uint32   `protobuf:"varint,7,req,name=diamond" json:"diamond,omitempty"`
	Roomtype         *uint32   `protobuf:"varint,8,req,name=roomtype" json:"roomtype,omitempty"`
	Roomid           *string   `protobuf:"bytes,9,req,name=roomid" json:"roomid,omitempty"`
	Invitecode       *string   `protobuf:"bytes,10,req,name=invitecode" json:"invitecode,omitempty"`
	Agent            *string   `protobuf:"bytes,11,opt,name=agent" json:"agent,omitempty"`
	Give             *uint32   `protobuf:"varint,12,opt,name=give" json:"give,omitempty"`
	Bank             *uint32   `protobuf:"varint,13,opt,name=bank" json:"bank,omitempty"`
	Data             *Activity `protobuf:"bytes,14,opt,name=data" json:"data,omitempty"`
	Vip              *VipInfo  `protobuf:"bytes,15,opt,name=vip" json:"vip,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *UserData) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *UserData) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *UserData) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *UserData) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *UserData) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *UserData) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *UserData) GetDiamond() uint32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *UserData) GetRoomtype() uint32 {
	if m != nil && m.Roomtype != nil {
		return *m.Roomtype
	}
	return 0
}

func (m *UserData) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *UserData) GetInvitecode() string {
	if m != nil && m.Invitecode != nil {
		return *m.Invitecode
	}
	return ""
}

func (m *UserData) GetAgent() string {
	if m != nil && m.Agent != nil {
		return *m.Agent
	}
	return ""
}

func (m *UserData) GetGive() uint32 {
	if m != nil && m.Give != nil {
		return *m.Give
	}
	return 0
}

func (m *UserData) GetBank() uint32 {
	if m != nil && m.Bank != nil {
		return *m.Bank
	}
	return 0
}

func (m *UserData) GetData() *Activity {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserData) GetVip() *VipInfo {
	if m != nil {
		return m.Vip
	}
	return nil
}

type UserInfo struct {
	Userid           *string `protobuf:"bytes,1,req,name=userid" json:"userid,omitempty"`
	Nickname         *string `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Phone            *string `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Sex              *uint32 `protobuf:"varint,4,req,name=sex" json:"sex,omitempty"`
	Photo            *string `protobuf:"bytes,5,req,name=photo" json:"photo,omitempty"`
	Coin             *uint32 `protobuf:"varint,6,req,name=coin" json:"coin,omitempty"`
	Diamond          *uint32 `protobuf:"varint,7,req,name=diamond" json:"diamond,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *UserInfo) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *UserInfo) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *UserInfo) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *UserInfo) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *UserInfo) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *UserInfo) GetDiamond() uint32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

// 房间数据
type RoomInfo struct {
	Roomid           *string `protobuf:"bytes,1,req,name=roomid" json:"roomid,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,req,name=rtype" json:"rtype,omitempty"`
	Rname            *string `protobuf:"bytes,3,req,name=rname" json:"rname,omitempty"`
	Count            *uint32 `protobuf:"varint,4,req,name=count" json:"count,omitempty"`
	Ante             *uint32 `protobuf:"varint,5,opt,name=ante" json:"ante,omitempty"`
	Chat             *uint32 `protobuf:"varint,6,opt,name=chat" json:"chat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomInfo) Reset()                    { *m = RoomInfo{} }
func (m *RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()               {}
func (*RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RoomInfo) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *RoomInfo) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *RoomInfo) GetRname() string {
	if m != nil && m.Rname != nil {
		return *m.Rname
	}
	return ""
}

func (m *RoomInfo) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *RoomInfo) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *RoomInfo) GetChat() uint32 {
	if m != nil && m.Chat != nil {
		return *m.Chat
	}
	return 0
}

// 玩家的活动数据
type Activity struct {
	Firstpay         *uint32 `protobuf:"varint,1,opt,name=firstpay" json:"firstpay,omitempty"`
	Relieve          *uint32 `protobuf:"varint,2,opt,name=relieve" json:"relieve,omitempty"`
	Bankrupt         *uint32 `protobuf:"varint,3,opt,name=bankrupt" json:"bankrupt,omitempty"`
	Prizedraw        *uint32 `protobuf:"varint,4,opt,name=prizedraw" json:"prizedraw,omitempty"`
	Leftdraw         *uint32 `protobuf:"varint,5,opt,name=leftdraw" json:"leftdraw,omitempty"`
	Kicktimes        *uint32 `protobuf:"varint,6,opt,name=kicktimes" json:"kicktimes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Activity) GetFirstpay() uint32 {
	if m != nil && m.Firstpay != nil {
		return *m.Firstpay
	}
	return 0
}

func (m *Activity) GetRelieve() uint32 {
	if m != nil && m.Relieve != nil {
		return *m.Relieve
	}
	return 0
}

func (m *Activity) GetBankrupt() uint32 {
	if m != nil && m.Bankrupt != nil {
		return *m.Bankrupt
	}
	return 0
}

func (m *Activity) GetPrizedraw() uint32 {
	if m != nil && m.Prizedraw != nil {
		return *m.Prizedraw
	}
	return 0
}

func (m *Activity) GetLeftdraw() uint32 {
	if m != nil && m.Leftdraw != nil {
		return *m.Leftdraw
	}
	return 0
}

func (m *Activity) GetKicktimes() uint32 {
	if m != nil && m.Kicktimes != nil {
		return *m.Kicktimes
	}
	return 0
}

// 奖品
type Prize struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,opt,name=rtype" json:"rtype,omitempty"`
	Number           *uint32 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Prize) Reset()                    { *m = Prize{} }
func (m *Prize) String() string            { return proto.CompactTextString(m) }
func (*Prize) ProtoMessage()               {}
func (*Prize) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *Prize) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Prize) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *Prize) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 经典场
type Classic struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ptype            *uint32 `protobuf:"varint,2,opt,name=ptype" json:"ptype,omitempty"`
	Rtype            *uint32 `protobuf:"varint,3,opt,name=rtype" json:"rtype,omitempty"`
	Ante             *uint32 `protobuf:"varint,4,opt,name=ante" json:"ante,omitempty"`
	Minimum          *uint32 `protobuf:"varint,5,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *uint32 `protobuf:"varint,6,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Classic) Reset()                    { *m = Classic{} }
func (m *Classic) String() string            { return proto.CompactTextString(m) }
func (*Classic) ProtoMessage()               {}
func (*Classic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *Classic) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Classic) GetPtype() uint32 {
	if m != nil && m.Ptype != nil {
		return *m.Ptype
	}
	return 0
}

func (m *Classic) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *Classic) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *Classic) GetMinimum() uint32 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *Classic) GetMaximum() uint32 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

// Vip
type Vip struct {
	Level            *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Number           *uint32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Pay              *uint32 `protobuf:"varint,3,opt,name=pay" json:"pay,omitempty"`
	Prize            *uint32 `protobuf:"varint,4,opt,name=prize" json:"prize,omitempty"`
	Kick             *uint32 `protobuf:"varint,5,opt,name=kick" json:"kick,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Vip) Reset()                    { *m = Vip{} }
func (m *Vip) String() string            { return proto.CompactTextString(m) }
func (*Vip) ProtoMessage()               {}
func (*Vip) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *Vip) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Vip) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Vip) GetPay() uint32 {
	if m != nil && m.Pay != nil {
		return *m.Pay
	}
	return 0
}

func (m *Vip) GetPrize() uint32 {
	if m != nil && m.Prize != nil {
		return *m.Prize
	}
	return 0
}

func (m *Vip) GetKick() uint32 {
	if m != nil && m.Kick != nil {
		return *m.Kick
	}
	return 0
}

// vip
type VipInfo struct {
	Level            *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Number           *uint32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VipInfo) Reset()                    { *m = VipInfo{} }
func (m *VipInfo) String() string            { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()               {}
func (*VipInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *VipInfo) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *VipInfo) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 玩家的基础数据
type RoomUser struct {
	Userid           *string  `protobuf:"bytes,1,req,name=userid" json:"userid,omitempty"`
	Nickname         *string  `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Phone            *string  `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Sex              *uint32  `protobuf:"varint,4,req,name=sex" json:"sex,omitempty"`
	Photo            *string  `protobuf:"bytes,5,req,name=photo" json:"photo,omitempty"`
	Coin             *uint32  `protobuf:"varint,6,req,name=coin" json:"coin,omitempty"`
	Diamond          *uint32  `protobuf:"varint,7,req,name=diamond" json:"diamond,omitempty"`
	Seat             *uint32  `protobuf:"varint,8,req,name=seat" json:"seat,omitempty"`
	Ready            *bool    `protobuf:"varint,9,req,name=ready" json:"ready,omitempty"`
	Score            *int32   `protobuf:"varint,10,req,name=score" json:"score,omitempty"`
	Dealer           *uint32  `protobuf:"varint,11,req,name=dealer" json:"dealer,omitempty"`
	Bet              *uint32  `protobuf:"varint,12,opt,name=bet" json:"bet,omitempty"`
	Cards            []uint32 `protobuf:"varint,13,rep,name=cards" json:"cards,omitempty"`
	Num              *uint32  `protobuf:"varint,14,opt,name=num" json:"num,omitempty"`
	Niu              *bool    `protobuf:"varint,15,opt,name=niu" json:"niu,omitempty"`
	Vip              *VipInfo `protobuf:"bytes,16,opt,name=vip" json:"vip,omitempty"`
	Value            *uint32  `protobuf:"varint,17,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RoomUser) Reset()                    { *m = RoomUser{} }
func (m *RoomUser) String() string            { return proto.CompactTextString(m) }
func (*RoomUser) ProtoMessage()               {}
func (*RoomUser) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *RoomUser) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *RoomUser) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *RoomUser) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *RoomUser) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *RoomUser) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *RoomUser) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *RoomUser) GetDiamond() uint32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *RoomUser) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomUser) GetReady() bool {
	if m != nil && m.Ready != nil {
		return *m.Ready
	}
	return false
}

func (m *RoomUser) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *RoomUser) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *RoomUser) GetBet() uint32 {
	if m != nil && m.Bet != nil {
		return *m.Bet
	}
	return 0
}

func (m *RoomUser) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *RoomUser) GetNum() uint32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *RoomUser) GetNiu() bool {
	if m != nil && m.Niu != nil {
		return *m.Niu
	}
	return false
}

func (m *RoomUser) GetVip() *VipInfo {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *RoomUser) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 房间数据
type RoomData struct {
	Roomid           *string `protobuf:"bytes,1,req,name=roomid" json:"roomid,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,req,name=rtype" json:"rtype,omitempty"`
	Rname            *string `protobuf:"bytes,3,req,name=rname" json:"rname,omitempty"`
	Count            *uint32 `protobuf:"varint,4,req,name=count" json:"count,omitempty"`
	Ante             *uint32 `protobuf:"varint,5,opt,name=ante" json:"ante,omitempty"`
	Chat             *uint32 `protobuf:"varint,6,opt,name=chat" json:"chat,omitempty"`
	Expire           *uint32 `protobuf:"varint,7,req,name=expire" json:"expire,omitempty"`
	Invitecode       *string `protobuf:"bytes,8,req,name=invitecode" json:"invitecode,omitempty"`
	Dealer           *uint32 `protobuf:"varint,9,req,name=dealer" json:"dealer,omitempty"`
	Round            *uint32 `protobuf:"varint,10,req,name=round" json:"round,omitempty"`
	Userid           *string `protobuf:"bytes,11,req,name=userid" json:"userid,omitempty"`
	State            *uint32 `protobuf:"varint,12,req,name=state" json:"state,omitempty"`
	Card             *uint32 `protobuf:"varint,13,opt,name=card" json:"card,omitempty"`
	Xi               *uint32 `protobuf:"varint,14,opt,name=xi" json:"xi,omitempty"`
	Draw             *uint32 `protobuf:"varint,15,opt,name=draw" json:"draw,omitempty"`
	Discard          *uint32 `protobuf:"varint,16,opt,name=discard" json:"discard,omitempty"`
	Seat             *uint32 `protobuf:"varint,17,opt,name=seat" json:"seat,omitempty"`
	Number           *uint32 `protobuf:"varint,18,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomData) Reset()                    { *m = RoomData{} }
func (m *RoomData) String() string            { return proto.CompactTextString(m) }
func (*RoomData) ProtoMessage()               {}
func (*RoomData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *RoomData) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *RoomData) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *RoomData) GetRname() string {
	if m != nil && m.Rname != nil {
		return *m.Rname
	}
	return ""
}

func (m *RoomData) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *RoomData) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *RoomData) GetChat() uint32 {
	if m != nil && m.Chat != nil {
		return *m.Chat
	}
	return 0
}

func (m *RoomData) GetExpire() uint32 {
	if m != nil && m.Expire != nil {
		return *m.Expire
	}
	return 0
}

func (m *RoomData) GetInvitecode() string {
	if m != nil && m.Invitecode != nil {
		return *m.Invitecode
	}
	return ""
}

func (m *RoomData) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *RoomData) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *RoomData) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *RoomData) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *RoomData) GetCard() uint32 {
	if m != nil && m.Card != nil {
		return *m.Card
	}
	return 0
}

func (m *RoomData) GetXi() uint32 {
	if m != nil && m.Xi != nil {
		return *m.Xi
	}
	return 0
}

func (m *RoomData) GetDraw() uint32 {
	if m != nil && m.Draw != nil {
		return *m.Draw
	}
	return 0
}

func (m *RoomData) GetDiscard() uint32 {
	if m != nil && m.Discard != nil {
		return *m.Discard
	}
	return 0
}

func (m *RoomData) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomData) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 下注信息
type RoomBets struct {
	Seat             *uint32 `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Bets             *uint32 `protobuf:"varint,2,req,name=bets" json:"bets,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomBets) Reset()                    { *m = RoomBets{} }
func (m *RoomBets) String() string            { return proto.CompactTextString(m) }
func (*RoomBets) ProtoMessage()               {}
func (*RoomBets) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *RoomBets) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomBets) GetBets() uint32 {
	if m != nil && m.Bets != nil {
		return *m.Bets
	}
	return 0
}

// 玩家的基础数据
type FreeUser struct {
	Userid           *string     `protobuf:"bytes,1,req,name=userid" json:"userid,omitempty"`
	Nickname         *string     `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Phone            *string     `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Sex              *uint32     `protobuf:"varint,4,req,name=sex" json:"sex,omitempty"`
	Photo            *string     `protobuf:"bytes,5,req,name=photo" json:"photo,omitempty"`
	Coin             *uint32     `protobuf:"varint,6,req,name=coin" json:"coin,omitempty"`
	Diamond          *uint32     `protobuf:"varint,7,req,name=diamond" json:"diamond,omitempty"`
	Seat             *uint32     `protobuf:"varint,8,req,name=seat" json:"seat,omitempty"`
	Ready            *bool       `protobuf:"varint,9,req,name=ready" json:"ready,omitempty"`
	Bet              *uint32     `protobuf:"varint,10,opt,name=bet" json:"bet,omitempty"`
	Bets             []*RoomBets `protobuf:"bytes,11,rep,name=bets" json:"bets,omitempty"`
	Vip              *VipInfo    `protobuf:"bytes,12,opt,name=vip" json:"vip,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FreeUser) Reset()                    { *m = FreeUser{} }
func (m *FreeUser) String() string            { return proto.CompactTextString(m) }
func (*FreeUser) ProtoMessage()               {}
func (*FreeUser) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *FreeUser) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *FreeUser) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *FreeUser) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *FreeUser) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *FreeUser) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *FreeUser) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *FreeUser) GetDiamond() uint32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *FreeUser) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *FreeUser) GetReady() bool {
	if m != nil && m.Ready != nil {
		return *m.Ready
	}
	return false
}

func (m *FreeUser) GetBet() uint32 {
	if m != nil && m.Bet != nil {
		return *m.Bet
	}
	return 0
}

func (m *FreeUser) GetBets() []*RoomBets {
	if m != nil {
		return m.Bets
	}
	return nil
}

func (m *FreeUser) GetVip() *VipInfo {
	if m != nil {
		return m.Vip
	}
	return nil
}

// 房间数据
type FreeRoom struct {
	Roomid           *string `protobuf:"bytes,1,req,name=roomid" json:"roomid,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,req,name=rtype" json:"rtype,omitempty"`
	Rname            *string `protobuf:"bytes,3,req,name=rname" json:"rname,omitempty"`
	Count            *uint32 `protobuf:"varint,4,req,name=count" json:"count,omitempty"`
	Ante             *uint32 `protobuf:"varint,5,opt,name=ante" json:"ante,omitempty"`
	Chat             *uint32 `protobuf:"varint,6,opt,name=chat" json:"chat,omitempty"`
	Dealer           *uint32 `protobuf:"varint,7,req,name=dealer" json:"dealer,omitempty"`
	Userid           *string `protobuf:"bytes,8,req,name=userid" json:"userid,omitempty"`
	Coin             *uint32 `protobuf:"varint,9,req,name=coin" json:"coin,omitempty"`
	Pond             *uint32 `protobuf:"varint,10,req,name=pond" json:"pond,omitempty"`
	State            *uint32 `protobuf:"varint,11,req,name=state" json:"state,omitempty"`
	Timer            *uint32 `protobuf:"varint,12,opt,name=timer" json:"timer,omitempty"`
	DealerNum        *uint32 `protobuf:"varint,13,req,name=dealerNum" json:"dealerNum,omitempty"`
	LeftDealerNum    *uint32 `protobuf:"varint,14,req,name=leftDealerNum" json:"leftDealerNum,omitempty"`
	Photo            *string `protobuf:"bytes,15,req,name=photo" json:"photo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FreeRoom) Reset()                    { *m = FreeRoom{} }
func (m *FreeRoom) String() string            { return proto.CompactTextString(m) }
func (*FreeRoom) ProtoMessage()               {}
func (*FreeRoom) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *FreeRoom) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *FreeRoom) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *FreeRoom) GetRname() string {
	if m != nil && m.Rname != nil {
		return *m.Rname
	}
	return ""
}

func (m *FreeRoom) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *FreeRoom) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *FreeRoom) GetChat() uint32 {
	if m != nil && m.Chat != nil {
		return *m.Chat
	}
	return 0
}

func (m *FreeRoom) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *FreeRoom) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *FreeRoom) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *FreeRoom) GetPond() uint32 {
	if m != nil && m.Pond != nil {
		return *m.Pond
	}
	return 0
}

func (m *FreeRoom) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *FreeRoom) GetTimer() uint32 {
	if m != nil && m.Timer != nil {
		return *m.Timer
	}
	return 0
}

func (m *FreeRoom) GetDealerNum() uint32 {
	if m != nil && m.DealerNum != nil {
		return *m.DealerNum
	}
	return 0
}

func (m *FreeRoom) GetLeftDealerNum() uint32 {
	if m != nil && m.LeftDealerNum != nil {
		return *m.LeftDealerNum
	}
	return 0
}

func (m *FreeRoom) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

// 结算数据
type RoomOver struct {
	Seat             *uint32  `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Cards            []uint32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	Value            *uint32  `protobuf:"varint,3,req,name=value" json:"value,omitempty"`
	Total            *int32   `protobuf:"varint,4,req,name=total" json:"total,omitempty"`
	Score            *int32   `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RoomOver) Reset()                    { *m = RoomOver{} }
func (m *RoomOver) String() string            { return proto.CompactTextString(m) }
func (*RoomOver) ProtoMessage()               {}
func (*RoomOver) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *RoomOver) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *RoomOver) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *RoomOver) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *RoomOver) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 结算数据,百人场时为5个位置1庄家，2天，3地，4玄，5黄
type FreeRoomOver struct {
	Seat             *uint32      `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Cards            []uint32     `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	Value            *uint32      `protobuf:"varint,3,req,name=value" json:"value,omitempty"`
	Total            *int32       `protobuf:"varint,4,req,name=total" json:"total,omitempty"`
	Score            *int32       `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	List             []*RoomScore `protobuf:"bytes,6,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FreeRoomOver) Reset()                    { *m = FreeRoomOver{} }
func (m *FreeRoomOver) String() string            { return proto.CompactTextString(m) }
func (*FreeRoomOver) ProtoMessage()               {}
func (*FreeRoomOver) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *FreeRoomOver) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *FreeRoomOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *FreeRoomOver) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *FreeRoomOver) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *FreeRoomOver) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *FreeRoomOver) GetList() []*RoomScore {
	if m != nil {
		return m.List
	}
	return nil
}

// 投票信息
type RoomScore struct {
	Seat             *uint32 `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Userid           *string `protobuf:"bytes,2,req,name=userid" json:"userid,omitempty"`
	Score            *int32  `protobuf:"varint,3,req,name=score" json:"score,omitempty"`
	Pond             *uint32 `protobuf:"varint,4,req,name=pond" json:"pond,omitempty"`
	Coin             *uint32 `protobuf:"varint,5,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomScore) Reset()                    { *m = RoomScore{} }
func (m *RoomScore) String() string            { return proto.CompactTextString(m) }
func (*RoomScore) ProtoMessage()               {}
func (*RoomScore) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *RoomScore) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomScore) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *RoomScore) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *RoomScore) GetPond() uint32 {
	if m != nil && m.Pond != nil {
		return *m.Pond
	}
	return 0
}

func (m *RoomScore) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

//
type ClassicOver struct {
	Seat             *uint32  `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Userid           *string  `protobuf:"bytes,2,req,name=userid" json:"userid,omitempty"`
	Cards            []uint32 `protobuf:"varint,3,rep,name=cards" json:"cards,omitempty"`
	Value            *uint32  `protobuf:"varint,4,req,name=value" json:"value,omitempty"`
	Bets             *uint32  `protobuf:"varint,5,req,name=bets" json:"bets,omitempty"`
	Score            *int32   `protobuf:"varint,6,req,name=score" json:"score,omitempty"`
	Coin             *uint32  `protobuf:"varint,7,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ClassicOver) Reset()                    { *m = ClassicOver{} }
func (m *ClassicOver) String() string            { return proto.CompactTextString(m) }
func (*ClassicOver) ProtoMessage()               {}
func (*ClassicOver) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *ClassicOver) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *ClassicOver) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *ClassicOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ClassicOver) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ClassicOver) GetBets() uint32 {
	if m != nil && m.Bets != nil {
		return *m.Bets
	}
	return 0
}

func (m *ClassicOver) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *ClassicOver) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 结算数据
type OverList struct {
	Seat             *uint32  `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Userid           *string  `protobuf:"bytes,2,req,name=userid" json:"userid,omitempty"`
	Cards            []uint32 `protobuf:"varint,3,rep,name=cards" json:"cards,omitempty"`
	Value            *uint32  `protobuf:"varint,4,req,name=value" json:"value,omitempty"`
	Round            *uint32  `protobuf:"varint,5,req,name=round" json:"round,omitempty"`
	Score            *int32   `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
	Dealer           *uint32  `protobuf:"varint,7,opt,name=dealer" json:"dealer,omitempty"`
	Bets             *uint32  `protobuf:"varint,8,opt,name=bets" json:"bets,omitempty"`
	Nickname         *string  `protobuf:"bytes,9,opt,name=nickname" json:"nickname,omitempty"`
	Photo            *string  `protobuf:"bytes,10,opt,name=photo" json:"photo,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OverList) Reset()                    { *m = OverList{} }
func (m *OverList) String() string            { return proto.CompactTextString(m) }
func (*OverList) ProtoMessage()               {}
func (*OverList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *OverList) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *OverList) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *OverList) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *OverList) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *OverList) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *OverList) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *OverList) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *OverList) GetBets() uint32 {
	if m != nil && m.Bets != nil {
		return *m.Bets
	}
	return 0
}

func (m *OverList) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *OverList) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

// 投票信息
type RoomVote struct {
	Seat             *uint32  `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Agree            []uint32 `protobuf:"varint,2,rep,name=agree" json:"agree,omitempty"`
	Disagree         []uint32 `protobuf:"varint,3,rep,name=disagree" json:"disagree,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RoomVote) Reset()                    { *m = RoomVote{} }
func (m *RoomVote) String() string            { return proto.CompactTextString(m) }
func (*RoomVote) ProtoMessage()               {}
func (*RoomVote) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *RoomVote) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomVote) GetAgree() []uint32 {
	if m != nil {
		return m.Agree
	}
	return nil
}

func (m *RoomVote) GetDisagree() []uint32 {
	if m != nil {
		return m.Disagree
	}
	return nil
}

// 获取玩家的私人房间记录
type RecordList struct {
	Roomid           *string     `protobuf:"bytes,1,opt,name=roomid" json:"roomid,omitempty"`
	Rtype            *uint32     `protobuf:"varint,2,opt,name=rtype" json:"rtype,omitempty"`
	Rname            *string     `protobuf:"bytes,3,req,name=rname" json:"rname,omitempty"`
	Count            *uint32     `protobuf:"varint,4,req,name=count" json:"count,omitempty"`
	Ante             *uint32     `protobuf:"varint,5,opt,name=ante" json:"ante,omitempty"`
	Chat             *uint32     `protobuf:"varint,6,opt,name=chat" json:"chat,omitempty"`
	Invitecode       *string     `protobuf:"bytes,7,req,name=invitecode" json:"invitecode,omitempty"`
	TotalRound       *uint32     `protobuf:"varint,8,req,name=totalRound" json:"totalRound,omitempty"`
	Userid           *string     `protobuf:"bytes,9,opt,name=userid" json:"userid,omitempty"`
	Ctime            *uint32     `protobuf:"varint,10,req,name=ctime" json:"ctime,omitempty"`
	List             []*OverList `protobuf:"bytes,11,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RecordList) Reset()                    { *m = RecordList{} }
func (m *RecordList) String() string            { return proto.CompactTextString(m) }
func (*RecordList) ProtoMessage()               {}
func (*RecordList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *RecordList) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *RecordList) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *RecordList) GetRname() string {
	if m != nil && m.Rname != nil {
		return *m.Rname
	}
	return ""
}

func (m *RecordList) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *RecordList) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *RecordList) GetChat() uint32 {
	if m != nil && m.Chat != nil {
		return *m.Chat
	}
	return 0
}

func (m *RecordList) GetInvitecode() string {
	if m != nil && m.Invitecode != nil {
		return *m.Invitecode
	}
	return ""
}

func (m *RecordList) GetTotalRound() uint32 {
	if m != nil && m.TotalRound != nil {
		return *m.TotalRound
	}
	return 0
}

func (m *RecordList) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *RecordList) GetCtime() uint32 {
	if m != nil && m.Ctime != nil {
		return *m.Ctime
	}
	return 0
}

func (m *RecordList) GetList() []*OverList {
	if m != nil {
		return m.List
	}
	return nil
}

// 上庄列表
type DealerList struct {
	Userid           *string `protobuf:"bytes,1,req,name=userid" json:"userid,omitempty"`
	Nickname         *string `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Photo            *string `protobuf:"bytes,3,req,name=photo" json:"photo,omitempty"`
	Coin             *uint32 `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DealerList) Reset()                    { *m = DealerList{} }
func (m *DealerList) String() string            { return proto.CompactTextString(m) }
func (*DealerList) ProtoMessage()               {}
func (*DealerList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *DealerList) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *DealerList) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *DealerList) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *DealerList) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type FreeTrendList struct {
	Round            *uint32      `protobuf:"varint,1,req,name=round" json:"round,omitempty"`
	List             []*FreeTrend `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FreeTrendList) Reset()                    { *m = FreeTrendList{} }
func (m *FreeTrendList) String() string            { return proto.CompactTextString(m) }
func (*FreeTrendList) ProtoMessage()               {}
func (*FreeTrendList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *FreeTrendList) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *FreeTrendList) GetList() []*FreeTrend {
	if m != nil {
		return m.List
	}
	return nil
}

type FreeTrend struct {
	Seat             *uint32 `protobuf:"varint,1,req,name=seat" json:"seat,omitempty"`
	Win              *bool   `protobuf:"varint,2,req,name=win" json:"win,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FreeTrend) Reset()                    { *m = FreeTrend{} }
func (m *FreeTrend) String() string            { return proto.CompactTextString(m) }
func (*FreeTrend) ProtoMessage()               {}
func (*FreeTrend) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *FreeTrend) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *FreeTrend) GetWin() bool {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return false
}

type PrizeCard struct {
	Card             *uint32 `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,opt,name=rtype" json:"rtype,omitempty"`
	Number           *uint32 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PrizeCard) Reset()                    { *m = PrizeCard{} }
func (m *PrizeCard) String() string            { return proto.CompactTextString(m) }
func (*PrizeCard) ProtoMessage()               {}
func (*PrizeCard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *PrizeCard) GetCard() uint32 {
	if m != nil && m.Card != nil {
		return *m.Card
	}
	return 0
}

func (m *PrizeCard) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *PrizeCard) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 牌面
type RoomCard struct {
	Seat             *uint32  `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	Handcards        []uint32 `protobuf:"varint,2,rep,name=handcards" json:"handcards,omitempty"`
	Kancards         []uint32 `protobuf:"varint,3,rep,name=kancards" json:"kancards,omitempty"`
	Outcards         []uint32 `protobuf:"varint,4,rep,name=outcards" json:"outcards,omitempty"`
	Chowcards        []uint32 `protobuf:"varint,5,rep,name=chowcards" json:"chowcards,omitempty"`
	Pongcards        []uint32 `protobuf:"varint,6,rep,name=pongcards" json:"pongcards,omitempty"`
	Ticards          []uint32 `protobuf:"varint,7,rep,name=ticards" json:"ticards,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RoomCard) Reset()                    { *m = RoomCard{} }
func (m *RoomCard) String() string            { return proto.CompactTextString(m) }
func (*RoomCard) ProtoMessage()               {}
func (*RoomCard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *RoomCard) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomCard) GetHandcards() []uint32 {
	if m != nil {
		return m.Handcards
	}
	return nil
}

func (m *RoomCard) GetKancards() []uint32 {
	if m != nil {
		return m.Kancards
	}
	return nil
}

func (m *RoomCard) GetOutcards() []uint32 {
	if m != nil {
		return m.Outcards
	}
	return nil
}

func (m *RoomCard) GetChowcards() []uint32 {
	if m != nil {
		return m.Chowcards
	}
	return nil
}

func (m *RoomCard) GetPongcards() []uint32 {
	if m != nil {
		return m.Pongcards
	}
	return nil
}

func (m *RoomCard) GetTicards() []uint32 {
	if m != nil {
		return m.Ticards
	}
	return nil
}

// 房间内位置数据
type RoomSeat struct {
	Seat             *uint32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	Userid           *string `protobuf:"bytes,2,opt,name=userid" json:"userid,omitempty"`
	Nickname         *string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	Photo            *string `protobuf:"bytes,4,opt,name=photo" json:"photo,omitempty"`
	Score            *int32  `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomSeat) Reset()                    { *m = RoomSeat{} }
func (m *RoomSeat) String() string            { return proto.CompactTextString(m) }
func (*RoomSeat) ProtoMessage()               {}
func (*RoomSeat) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *RoomSeat) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *RoomSeat) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *RoomSeat) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *RoomSeat) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *RoomSeat) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 单局结算数据
type ZiRoomOver struct {
	Seat             *uint32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	Total            *int32  `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Score            *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZiRoomOver) Reset()                    { *m = ZiRoomOver{} }
func (m *ZiRoomOver) String() string            { return proto.CompactTextString(m) }
func (*ZiRoomOver) ProtoMessage()               {}
func (*ZiRoomOver) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *ZiRoomOver) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *ZiRoomOver) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ZiRoomOver) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 单局结算数据
type ZiRoomRound struct {
	Seat             *uint32 `protobuf:"varint,1,opt,name=seat" json:"seat,omitempty"`
	Score            *int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Round            *uint32 `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZiRoomRound) Reset()                    { *m = ZiRoomRound{} }
func (m *ZiRoomRound) String() string            { return proto.CompactTextString(m) }
func (*ZiRoomRound) ProtoMessage()               {}
func (*ZiRoomRound) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *ZiRoomRound) GetSeat() uint32 {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return 0
}

func (m *ZiRoomRound) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *ZiRoomRound) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

// 获取玩家的私人房间记录
type ZiRecordList struct {
	Info             *ZiRoomInfo    `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Seats            []*RoomSeat    `protobuf:"bytes,2,rep,name=seats" json:"seats,omitempty"`
	List             []*ZiRoomRound `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ZiRecordList) Reset()                    { *m = ZiRecordList{} }
func (m *ZiRecordList) String() string            { return proto.CompactTextString(m) }
func (*ZiRecordList) ProtoMessage()               {}
func (*ZiRecordList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *ZiRecordList) GetInfo() *ZiRoomInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ZiRecordList) GetSeats() []*RoomSeat {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *ZiRecordList) GetList() []*ZiRoomRound {
	if m != nil {
		return m.List
	}
	return nil
}

// 房间基本信息
type ZiRoomInfo struct {
	Roomid           *string `protobuf:"bytes,1,opt,name=roomid" json:"roomid,omitempty"`
	Rtype            *uint32 `protobuf:"varint,2,opt,name=rtype" json:"rtype,omitempty"`
	Rname            *string `protobuf:"bytes,3,opt,name=rname" json:"rname,omitempty"`
	Expire           *uint32 `protobuf:"varint,4,opt,name=expire" json:"expire,omitempty"`
	Count            *uint32 `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Invitecode       *string `protobuf:"bytes,6,opt,name=invitecode" json:"invitecode,omitempty"`
	Userid           *string `protobuf:"bytes,7,opt,name=userid" json:"userid,omitempty"`
	Round            *uint32 `protobuf:"varint,8,opt,name=round" json:"round,omitempty"`
	Ante             *uint32 `protobuf:"varint,9,opt,name=ante" json:"ante,omitempty"`
	Chat             *uint32 `protobuf:"varint,10,opt,name=chat" json:"chat,omitempty"`
	Dealer           *uint32 `protobuf:"varint,11,opt,name=dealer" json:"dealer,omitempty"`
	Ctime            *uint32 `protobuf:"varint,12,opt,name=ctime" json:"ctime,omitempty"`
	Xi               *uint32 `protobuf:"varint,13,opt,name=xi" json:"xi,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZiRoomInfo) Reset()                    { *m = ZiRoomInfo{} }
func (m *ZiRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*ZiRoomInfo) ProtoMessage()               {}
func (*ZiRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *ZiRoomInfo) GetRoomid() string {
	if m != nil && m.Roomid != nil {
		return *m.Roomid
	}
	return ""
}

func (m *ZiRoomInfo) GetRtype() uint32 {
	if m != nil && m.Rtype != nil {
		return *m.Rtype
	}
	return 0
}

func (m *ZiRoomInfo) GetRname() string {
	if m != nil && m.Rname != nil {
		return *m.Rname
	}
	return ""
}

func (m *ZiRoomInfo) GetExpire() uint32 {
	if m != nil && m.Expire != nil {
		return *m.Expire
	}
	return 0
}

func (m *ZiRoomInfo) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *ZiRoomInfo) GetInvitecode() string {
	if m != nil && m.Invitecode != nil {
		return *m.Invitecode
	}
	return ""
}

func (m *ZiRoomInfo) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *ZiRoomInfo) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *ZiRoomInfo) GetAnte() uint32 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *ZiRoomInfo) GetChat() uint32 {
	if m != nil && m.Chat != nil {
		return *m.Chat
	}
	return 0
}

func (m *ZiRoomInfo) GetDealer() uint32 {
	if m != nil && m.Dealer != nil {
		return *m.Dealer
	}
	return 0
}

func (m *ZiRoomInfo) GetCtime() uint32 {
	if m != nil && m.Ctime != nil {
		return *m.Ctime
	}
	return 0
}

func (m *ZiRoomInfo) GetXi() uint32 {
	if m != nil && m.Xi != nil {
		return *m.Xi
	}
	return 0
}

func init() {
	proto.RegisterType((*UserData)(nil), "protocol.UserData")
	proto.RegisterType((*UserInfo)(nil), "protocol.UserInfo")
	proto.RegisterType((*RoomInfo)(nil), "protocol.RoomInfo")
	proto.RegisterType((*Activity)(nil), "protocol.Activity")
	proto.RegisterType((*Prize)(nil), "protocol.Prize")
	proto.RegisterType((*Classic)(nil), "protocol.Classic")
	proto.RegisterType((*Vip)(nil), "protocol.Vip")
	proto.RegisterType((*VipInfo)(nil), "protocol.VipInfo")
	proto.RegisterType((*RoomUser)(nil), "protocol.RoomUser")
	proto.RegisterType((*RoomData)(nil), "protocol.RoomData")
	proto.RegisterType((*RoomBets)(nil), "protocol.RoomBets")
	proto.RegisterType((*FreeUser)(nil), "protocol.FreeUser")
	proto.RegisterType((*FreeRoom)(nil), "protocol.FreeRoom")
	proto.RegisterType((*RoomOver)(nil), "protocol.RoomOver")
	proto.RegisterType((*FreeRoomOver)(nil), "protocol.FreeRoomOver")
	proto.RegisterType((*RoomScore)(nil), "protocol.RoomScore")
	proto.RegisterType((*ClassicOver)(nil), "protocol.ClassicOver")
	proto.RegisterType((*OverList)(nil), "protocol.OverList")
	proto.RegisterType((*RoomVote)(nil), "protocol.RoomVote")
	proto.RegisterType((*RecordList)(nil), "protocol.RecordList")
	proto.RegisterType((*DealerList)(nil), "protocol.DealerList")
	proto.RegisterType((*FreeTrendList)(nil), "protocol.FreeTrendList")
	proto.RegisterType((*FreeTrend)(nil), "protocol.FreeTrend")
	proto.RegisterType((*PrizeCard)(nil), "protocol.PrizeCard")
	proto.RegisterType((*RoomCard)(nil), "protocol.RoomCard")
	proto.RegisterType((*RoomSeat)(nil), "protocol.RoomSeat")
	proto.RegisterType((*ZiRoomOver)(nil), "protocol.ZiRoomOver")
	proto.RegisterType((*ZiRoomRound)(nil), "protocol.ZiRoomRound")
	proto.RegisterType((*ZiRecordList)(nil), "protocol.ZiRecordList")
	proto.RegisterType((*ZiRoomInfo)(nil), "protocol.ZiRoomInfo")
}

func init() { proto.RegisterFile("vo.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x58, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0x96, 0xed, 0xf9, 0xed, 0xc9, 0xec, 0x66, 0xcd, 0x82, 0x2c, 0x84, 0xd0, 0xca, 0xa0, 0x65,
	0xb9, 0x44, 0x22, 0x17, 0xce, 0x90, 0x05, 0x09, 0x69, 0x77, 0x59, 0x79, 0x61, 0x0f, 0xdc, 0x9c,
	0x71, 0x27, 0x69, 0x32, 0x63, 0x5b, 0xb6, 0x67, 0x92, 0x70, 0xe0, 0x8e, 0x04, 0xaf, 0xc0, 0x05,
	0x4e, 0x1c, 0x81, 0xa7, 0xe0, 0x51, 0x10, 0x0f, 0x41, 0xfd, 0x74, 0xb7, 0xdb, 0xf3, 0x13, 0x29,
	0x48, 0x0b, 0x11, 0xa7, 0xe9, 0xaa, 0x6a, 0x77, 0x7f, 0x5d, 0x3f, 0x5f, 0x75, 0x8f, 0x18, 0xad,
	0x8a, 0x83, 0xb2, 0x2a, 0x9a, 0x22, 0x1c, 0xd1, 0xcf, 0xac, 0x98, 0xc7, 0xdf, 0x05, 0x62, 0xf4,
	0x65, 0x2d, 0xab, 0xc7, 0x69, 0x93, 0x86, 0x6f, 0x88, 0xc1, 0x12, 0xc6, 0x2a, 0x8b, 0xbc, 0x07,
	0xfe, 0xa3, 0x71, 0xa2, 0xa5, 0xf0, 0x4d, 0x31, 0xca, 0xd5, 0xec, 0x3c, 0x4f, 0x17, 0x32, 0xf2,
	0xc9, 0x62, 0xe5, 0xf0, 0xbe, 0xe8, 0x97, 0x67, 0x45, 0x2e, 0xa3, 0xe0, 0x81, 0x07, 0x06, 0x16,
	0xc2, 0x7d, 0x11, 0xd4, 0xf2, 0x32, 0xea, 0xc1, 0xe4, 0x69, 0x82, 0x43, 0x3d, 0xaf, 0x29, 0xa2,
	0x3e, 0x2d, 0xc0, 0x42, 0x18, 0x8a, 0xde, 0xac, 0x50, 0x79, 0x34, 0xa0, 0x89, 0x34, 0x0e, 0x23,
	0x31, 0xcc, 0x54, 0xba, 0x28, 0xf2, 0x2c, 0x1a, 0x92, 0xda, 0x88, 0x88, 0xa3, 0x2a, 0x8a, 0x45,
	0x73, 0x55, 0xca, 0x68, 0x44, 0x26, 0x2b, 0x23, 0x76, 0x1c, 0x03, 0xf6, 0x31, 0x63, 0x67, 0x29,
	0x7c, 0x5b, 0x08, 0x95, 0xaf, 0x54, 0x23, 0x67, 0x45, 0x26, 0x23, 0x41, 0x36, 0x47, 0x83, 0xb8,
	0xd2, 0x53, 0x99, 0x37, 0xd1, 0x84, 0xf1, 0x93, 0x80, 0xb8, 0x4e, 0xd5, 0x4a, 0x46, 0x7b, 0xa0,
	0x04, 0x5c, 0x38, 0x46, 0xdd, 0x71, 0x9a, 0x9f, 0x47, 0x53, 0xd6, 0xe1, 0x38, 0x7c, 0x28, 0x7a,
	0x19, 0x78, 0x2e, 0xba, 0x03, 0xba, 0xc9, 0x61, 0x78, 0x60, 0xfc, 0x7a, 0xf0, 0xd1, 0xac, 0x51,
	0xb0, 0xc7, 0x55, 0x42, 0xf6, 0xf0, 0x1d, 0x11, 0xac, 0x54, 0x19, 0xdd, 0xa5, 0x69, 0xf7, 0xda,
	0x69, 0x2f, 0x55, 0xf9, 0x59, 0x7e, 0x52, 0x24, 0x68, 0x8d, 0x7f, 0xf1, 0x38, 0x16, 0xa8, 0xb9,
	0xed, 0xb1, 0x88, 0xbf, 0x07, 0xb0, 0x09, 0xb8, 0xd8, 0x80, 0xd5, 0xce, 0xf7, 0x3a, 0xce, 0x87,
	0x8d, 0x2a, 0x8a, 0x96, 0x4f, 0x1f, 0xb3, 0x40, 0x5a, 0xc2, 0x1f, 0xf0, 0xf6, 0x95, 0x01, 0x3f,
	0x2b, 0x96, 0x10, 0x08, 0x06, 0xca, 0x02, 0x82, 0x4a, 0xf3, 0x46, 0x02, 0x52, 0x72, 0x3a, 0x8e,
	0x09, 0xe8, 0x59, 0xda, 0x00, 0x50, 0xd2, 0xe1, 0x38, 0xfe, 0x1d, 0xe0, 0x18, 0x9f, 0xa3, 0x8f,
	0x4e, 0x54, 0x55, 0x37, 0x65, 0x7a, 0x05, 0x80, 0x70, 0x92, 0x95, 0xf1, 0x44, 0x95, 0x9c, 0x2b,
	0xb9, 0x42, 0x50, 0x68, 0x32, 0x22, 0x7e, 0x85, 0x31, 0xad, 0x96, 0x65, 0x43, 0x0e, 0x84, 0xaf,
	0x8c, 0x1c, 0xbe, 0x25, 0xc6, 0x65, 0xa5, 0xbe, 0x91, 0x59, 0x95, 0x5e, 0x00, 0x40, 0x34, 0xb6,
	0x0a, 0xfc, 0x72, 0x2e, 0x4f, 0x1a, 0x32, 0x32, 0x50, 0x2b, 0xe3, 0x97, 0xe7, 0x10, 0x9f, 0x46,
	0x2d, 0x64, 0xad, 0x11, 0xb7, 0x8a, 0xf8, 0x13, 0xd1, 0x7f, 0x8e, 0xcb, 0x84, 0x77, 0x84, 0x4f,
	0xde, 0xc3, 0xb8, 0xf9, 0x5d, 0xcf, 0x79, 0xad, 0xe7, 0xc0, 0xcf, 0xf9, 0x72, 0x71, 0x2c, 0x2b,
	0x0d, 0x50, 0x4b, 0xf1, 0x0f, 0x9e, 0x18, 0x1e, 0xcd, 0xd3, 0xba, 0x56, 0xb3, 0x6d, 0x2b, 0x95,
	0xee, 0x4a, 0xa5, 0x8d, 0x01, 0x69, 0x03, 0x77, 0x7d, 0xe3, 0xed, 0x9e, 0xe3, 0x6d, 0x70, 0xd8,
	0x42, 0xe5, 0x6a, 0xb1, 0x5c, 0xe8, 0xb3, 0x19, 0x91, 0x2c, 0xe9, 0x25, 0x59, 0x06, 0xda, 0xc2,
	0x62, 0x5c, 0x88, 0x00, 0x32, 0x1b, 0x37, 0x99, 0x83, 0x67, 0xe7, 0x3a, 0x08, 0x2c, 0x38, 0x87,
	0xf0, 0xdd, 0x43, 0x60, 0x9e, 0x62, 0xc0, 0x18, 0x10, 0x0e, 0x09, 0x3a, 0x7a, 0x47, 0xe3, 0x61,
	0x01, 0x41, 0xa2, 0x03, 0x4d, 0x4a, 0xe0, 0x38, 0xfe, 0x50, 0x0c, 0x75, 0x29, 0xdd, 0x6c, 0x53,
	0xe2, 0x3f, 0x4c, 0x63, 0xac, 0xbb, 0x5b, 0xcf, 0x7f, 0x30, 0xbb, 0x96, 0x90, 0xf8, 0xcc, 0x7d,
	0x34, 0xa6, 0x40, 0xca, 0x34, 0xbb, 0x22, 0xda, 0x1b, 0x25, 0x2c, 0xa0, 0xb6, 0x9e, 0x15, 0x15,
	0x13, 0x5e, 0x3f, 0x61, 0x01, 0xcf, 0x97, 0xc9, 0x74, 0x0e, 0x4e, 0x98, 0xd0, 0x0a, 0x5a, 0x42,
	0xb4, 0xc7, 0xb2, 0xd1, 0x64, 0x87, 0x43, 0x2a, 0xc6, 0xb4, 0xca, 0x6a, 0x20, 0xbb, 0x80, 0x8a,
	0x11, 0x05, 0x9c, 0x07, 0x6e, 0x23, 0xb2, 0x83, 0x79, 0x30, 0x24, 0x8d, 0x5a, 0x12, 0xaf, 0x8d,
	0x12, 0x1c, 0x1a, 0xa6, 0xdb, 0xbf, 0x8e, 0xe9, 0x70, 0xf9, 0x55, 0x3a, 0x5f, 0xca, 0xe8, 0x1e,
	0xc7, 0x88, 0x84, 0xf8, 0x47, 0x1d, 0x0b, 0xd3, 0x8b, 0xfe, 0x5b, 0x4a, 0x41, 0x04, 0xf2, 0xb2,
	0x54, 0xe0, 0x44, 0x0e, 0x83, 0x96, 0xd6, 0x3a, 0xca, 0x68, 0xa3, 0xa3, 0xb4, 0x5e, 0x1e, 0x77,
	0xbc, 0x8c, 0x18, 0x01, 0x40, 0x46, 0x31, 0x41, 0xe4, 0x28, 0x38, 0x39, 0x37, 0xe9, 0xe4, 0x1c,
	0x46, 0xb0, 0x49, 0x1b, 0x6c, 0x41, 0x34, 0x9b, 0x04, 0xc2, 0x09, 0xa1, 0x30, 0x3d, 0x08, 0xc7,
	0x58, 0xf0, 0x97, 0x4a, 0x07, 0x05, 0x46, 0x38, 0x87, 0x98, 0xe8, 0x2e, 0xcf, 0x21, 0x16, 0xa2,
	0x9c, 0xaa, 0xe9, 0xd3, 0x7d, 0x2e, 0x55, 0x2d, 0xda, 0x9c, 0xe2, 0x48, 0x70, 0x4e, 0xb5, 0xc5,
	0x12, 0x76, 0x8a, 0xe5, 0x90, 0xe3, 0xf3, 0xb1, 0x6c, 0x6a, 0xfb, 0x9d, 0xe7, 0xe4, 0x22, 0x76,
	0x48, 0xb0, 0xe9, 0xd0, 0xd0, 0x38, 0xfe, 0xcd, 0x17, 0xa3, 0x4f, 0x2b, 0x29, 0xff, 0x67, 0x05,
	0xa6, 0x4b, 0x46, 0xb4, 0x25, 0xf3, 0x50, 0x1f, 0x7e, 0x02, 0x15, 0xd3, 0xb9, 0x0a, 0x18, 0x97,
	0xb1, 0x43, 0x4c, 0x81, 0xec, 0x5d, 0x7b, 0x15, 0xf8, 0x53, 0x7b, 0x0d, 0xbf, 0xbd, 0x1d, 0xa5,
	0xa0, 0x53, 0x7a, 0xd8, 0x49, 0xe9, 0x36, 0x9e, 0xa3, 0x4e, 0x3c, 0x8d, 0xd7, 0xc7, 0x8e, 0xd7,
	0x41, 0x57, 0x16, 0x36, 0xfb, 0x69, 0xdc, 0x26, 0xf9, 0xc4, 0x4d, 0x72, 0xd0, 0x62, 0x77, 0xac,
	0x34, 0x21, 0xb1, 0x80, 0x8d, 0x94, 0x77, 0x7d, 0x06, 0x14, 0x34, 0xa5, 0xf9, 0xad, 0x22, 0x7c,
	0x57, 0x4c, 0xb1, 0xe5, 0x3e, 0xb6, 0x33, 0xee, 0xd0, 0x8c, 0xae, 0xb2, 0xcd, 0x91, 0xbb, 0x4e,
	0x8e, 0xc4, 0x2b, 0x4e, 0xeb, 0xcf, 0x57, 0xb0, 0xcb, 0xb6, 0xb4, 0xb6, 0x64, 0xe8, 0xbb, 0x64,
	0x68, 0x39, 0x2c, 0x60, 0xec, 0x24, 0x10, 0xf6, 0xa2, 0x49, 0xe7, 0xe4, 0x67, 0x20, 0x5e, 0x12,
	0x5a, 0x3a, 0x46, 0x47, 0x1b, 0x3a, 0x8e, 0x7f, 0xf2, 0xc4, 0x9e, 0x09, 0xf2, 0xbf, 0xbd, 0x79,
	0xf8, 0x9e, 0xe8, 0xcd, 0x55, 0x8d, 0x61, 0xc6, 0x74, 0x7d, 0xad, 0x9b, 0xae, 0x2f, 0x70, 0x4a,
	0x42, 0x13, 0xe2, 0xa5, 0x18, 0x5b, 0xd5, 0x56, 0x84, 0x6d, 0x12, 0xf8, 0x1b, 0x0c, 0x46, 0xfb,
	0x06, 0x6e, 0x0f, 0x32, 0x69, 0xd0, 0x73, 0xd2, 0xc0, 0xa4, 0x8b, 0x4e, 0x43, 0x1c, 0xa3, 0x73,
	0x26, 0xfa, 0x4a, 0xb3, 0xd3, 0x37, 0xd7, 0xec, 0xcc, 0x3e, 0x0b, 0xb6, 0xfa, 0xac, 0xe7, 0xfa,
	0xcc, 0x70, 0x56, 0xbf, 0xe5, 0xac, 0x16, 0xf9, 0x60, 0x0d, 0x39, 0xa1, 0x1c, 0x3a, 0x28, 0xff,
	0x82, 0x6b, 0x27, 0xc2, 0x7b, 0x02, 0x9e, 0x7a, 0x65, 0x10, 0x6d, 0xe3, 0xe8, 0xbb, 0x8d, 0xc3,
	0x01, 0xe9, 0x6d, 0x6b, 0xf1, 0x0c, 0xd3, 0x54, 0xaa, 0x39, 0xe6, 0x48, 0x3f, 0x5e, 0xf0, 0x98,
	0x2e, 0xeb, 0x8e, 0x89, 0x5c, 0xd7, 0x59, 0x17, 0x2a, 0x45, 0x58, 0xd6, 0x85, 0x4a, 0x79, 0xce,
	0x95, 0xf2, 0xb2, 0x68, 0xe4, 0xae, 0x64, 0x4d, 0x4f, 0x21, 0xa3, 0x4d, 0xb2, 0x92, 0x80, 0xfb,
	0x40, 0xb7, 0x61, 0x03, 0x1f, 0xd7, 0xca, 0xf1, 0xcf, 0xbe, 0x10, 0x09, 0xf4, 0xcd, 0x2a, 0x23,
	0x17, 0xba, 0x54, 0xe7, 0x6d, 0xa7, 0x3a, 0xef, 0xd5, 0x52, 0x5d, 0xb7, 0xbb, 0x0f, 0x37, 0xba,
	0x3b, 0xd8, 0xa9, 0xac, 0x12, 0x8a, 0x08, 0x37, 0x0a, 0x47, 0xe3, 0x04, 0x9c, 0x5d, 0xea, 0x06,
	0x1c, 0x89, 0xcc, 0x74, 0x7f, 0x12, 0xb0, 0x69, 0x50, 0x15, 0x6e, 0x34, 0x0d, 0x93, 0x54, 0xba,
	0x08, 0xbf, 0x16, 0x82, 0x59, 0xcc, 0x78, 0xe9, 0x1f, 0xb6, 0x51, 0x08, 0x68, 0xb0, 0xad, 0x3d,
	0xf6, 0x9c, 0x9c, 0x7e, 0x26, 0xa6, 0xc8, 0x4a, 0x5f, 0x54, 0x32, 0xe7, 0xa0, 0xd8, 0xfc, 0xf3,
	0xdc, 0xfc, 0x33, 0x04, 0xe2, 0xaf, 0x13, 0x88, 0xfd, 0x58, 0x63, 0xff, 0x40, 0x8c, 0xad, 0x6a,
	0x6b, 0xd6, 0x40, 0x2f, 0xbd, 0x00, 0x0c, 0x3e, 0xf5, 0x57, 0x1c, 0xc6, 0x4f, 0xc5, 0x98, 0x9e,
	0x45, 0x47, 0xfa, 0x86, 0x42, 0x17, 0x17, 0xcf, 0xb9, 0xf3, 0xdc, 0xec, 0x79, 0xf4, 0x87, 0x7e,
	0xab, 0x1e, 0xb9, 0x17, 0x1e, 0xcf, 0xb9, 0xf0, 0x40, 0x6f, 0x39, 0x4b, 0xf3, 0xcc, 0x25, 0xda,
	0x56, 0x81, 0x6e, 0x3d, 0x4f, 0x73, 0xb7, 0x5c, 0xad, 0x8c, 0xb6, 0x62, 0xd9, 0xb0, 0xad, 0xc7,
	0x36, 0x23, 0xe3, 0xaa, 0xb3, 0xb3, 0xe2, 0x82, 0x8d, 0x7d, 0x5e, 0xd5, 0x2a, 0xe8, 0x49, 0x59,
	0xe4, 0xa7, 0x6c, 0x1d, 0xb0, 0xd5, 0x2a, 0xf0, 0x8e, 0xd2, 0x28, 0xb6, 0x0d, 0xc9, 0x66, 0xc4,
	0xf8, 0x5b, 0x3e, 0xcb, 0x0b, 0x7d, 0xe1, 0xda, 0x38, 0x8b, 0xcb, 0x38, 0xde, 0x8e, 0xe4, 0x08,
	0x76, 0x55, 0x7b, 0xcf, 0xa9, 0xf6, 0x1d, 0x5d, 0xeb, 0x89, 0x10, 0x5f, 0xa9, 0x2d, 0x2d, 0xcb,
	0x73, 0x59, 0x80, 0xdb, 0x90, 0xcf, 0xdf, 0xad, 0xb5, 0xa1, 0xc0, 0x5d, 0xed, 0xa9, 0x98, 0xf0,
	0x6a, 0x5c, 0x3d, 0x3b, 0x96, 0xe3, 0x0f, 0x7d, 0x97, 0xe8, 0x6c, 0x52, 0x9a, 0x07, 0x2c, 0x0a,
	0xf8, 0x10, 0xde, 0x83, 0xf5, 0x5a, 0x42, 0x79, 0x24, 0x7a, 0x0a, 0x6e, 0x55, 0xb4, 0xe0, 0xe4,
	0xf0, 0x7e, 0x9b, 0xa5, 0xbc, 0x2b, 0xdd, 0xb8, 0x68, 0x06, 0xcc, 0xec, 0xe3, 0x76, 0xb5, 0x4e,
	0xe8, 0xb5, 0x0b, 0x1c, 0xba, 0x3b, 0xe1, 0x09, 0xe1, 0xfb, 0x3a, 0xf3, 0x03, 0x9a, 0xf8, 0xfa,
	0xfa, 0x9a, 0x74, 0x12, 0x9d, 0xfb, 0xbf, 0xfa, 0xc6, 0x5b, 0x1b, 0xff, 0x93, 0xdc, 0x88, 0xde,
	0xbc, 0x96, 0xde, 0xda, 0x67, 0x09, 0x17, 0xad, 0x79, 0x96, 0x58, 0xda, 0x63, 0x86, 0xd3, 0xb4,
	0xd7, 0xa5, 0xb3, 0x01, 0x2d, 0xb4, 0xf6, 0x58, 0xd1, 0xd9, 0x32, 0x5c, 0xa7, 0xab, 0x4a, 0x33,
	0x5c, 0xeb, 0x5e, 0x4b, 0xa2, 0xe3, 0x2d, 0x24, 0x2a, 0xb6, 0xde, 0x17, 0x27, 0x9d, 0x2e, 0x64,
	0x49, 0x50, 0xdf, 0xec, 0x98, 0x04, 0xf9, 0x01, 0x33, 0x35, 0x0f, 0x98, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x61, 0x67, 0x66, 0xdf, 0xa8, 0x14, 0x00, 0x00,
}
